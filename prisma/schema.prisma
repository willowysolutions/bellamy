datasource db {
  provider = "mongodb"
  url      = env("CLUSTER_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Brand {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products      Product[]
  subcategories SubCategory[]
}

model SubCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  categoryId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  category Category  @relation(fields: [categoryId], references: [id])
  products Product[]
}

// Parent Product (e.g., "Nike Air Max Shirt")
model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  image         String // Single main product image
  brandId       String?  @db.ObjectId
  categoryId    String?  @db.ObjectId
  subCategoryId String?  @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  brand       Brand?       @relation(fields: [brandId], references: [id])
  category    Category?    @relation(fields: [categoryId], references: [id])
  subCategory SubCategory? @relation(fields: [subCategoryId], references: [id])

  variants      ProductVariant[]
  notifications Notification[]
}

// Individual Variant (e.g., "Red - Large")
model ProductVariant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  sku       String   @unique // Unique SKU for this variant
  price     Float
  qty       Int      @default(0)
  images    String[] // Array of images for this variant (at least one required)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  options       VariantOption[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]

  @@map("product_variant")
}

// Links variants to their attribute values
model VariantOption {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  productVariantId String @db.ObjectId
  attributeId      String @db.ObjectId
  valueId          String @db.ObjectId

  variant        ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  attribute      Attribute      @relation(fields: [attributeId], references: [id])
  attributeValue AttributeValue @relation(fields: [valueId], references: [id])

  @@unique([productVariantId, attributeId])
  @@map("variant_option")
}

// Attribute Definition (e.g., "Color", "Size", "Material")
model Attribute {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  values         AttributeValue[]
  variantOptions VariantOption[]
}

// Attribute Values (e.g., "Red", "Blue", "Small", "Large")
model AttributeValue {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  attributeId String   @db.ObjectId
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  attribute      Attribute       @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  variantOptions VariantOption[]

  @@unique([attributeId, value])
  @@map("attribute_value")
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  variantId String   @db.ObjectId
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@unique([cartId, variantId])
  @@map("cart_item")
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items WishlistItem[]

  @@map("wishlist")
}

model WishlistItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  wishlistId String   @db.ObjectId
  variantId  String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  wishlist Wishlist       @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  variant  ProductVariant @relation(fields: [variantId], references: [id])

  @@unique([wishlistId, variantId])
  @@map("wishlist_item")
}

model User {
  id            String    @id @map("_id")
  name          String
  email         String
  phone         String?
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  role          String?
  banned        Boolean?  @default(false)
  banReason     String?
  banExpires    DateTime?
  branch        String?
  sessions      Session[]
  accounts      Account[]
  carts         Cart[]
  wishlists     Wishlist[]
  orders        Order[]

  @@unique([email])
  @@map("user")
}

model Order {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  totalAmount       Float
  status            String   @default("PENDING")
  paymentMethod     String
  razorpayOrderId   String?
  razorpayPaymentId String?
  razorpaySignature String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  phoneNumber       String
  street            String
  city              String
  state             String
  pincode           String

  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OrderItem[]

  @@map("order")
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  variantId String   @db.ObjectId
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@map("order_item")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  message   String
  seen      Boolean  @default(false)
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
}

model Session {
  id             String   @id @map("_id")
  expiresAt      DateTime
  token          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}